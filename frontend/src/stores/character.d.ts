import type { Character, CharacterCreate, CharacterUpdate, Gender } from '@/types';
export declare const useCharacterStore: import("pinia").StoreDefinition<"character", Pick<{
    characters: import("vue").Ref<{
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    }[], Character[] | {
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    }[]>;
    activeCharacter: import("vue").Ref<{
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    } | null, Character | {
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    total: import("vue").Ref<number, number>;
    currentPage: import("vue").Ref<number, number>;
    pageSize: import("vue").Ref<number, number>;
    hasCharacters: import("vue").ComputedRef<boolean>;
    hasActiveCharacter: import("vue").ComputedRef<boolean>;
    totalPages: import("vue").ComputedRef<number>;
    fetchCharacters: (params?: {
        search?: string;
        page?: number;
    }) => Promise<void>;
    fetchActiveCharacter: () => Promise<Character | null>;
    createCharacter: (data: CharacterCreate) => Promise<Character>;
    selectCharacter: (characterId: number) => Promise<Character>;
    updateCharacter: (characterId: number, data: CharacterUpdate) => Promise<Character>;
    deleteCharacter: (characterId: number) => Promise<void>;
    uploadAvatar: (characterId: number, file: File) => Promise<{
        avatar_url: string;
    }>;
    resetStore: () => void;
    initializeCharacters: () => Promise<void>;
}, "error" | "loading" | "characters" | "currentPage" | "activeCharacter" | "total" | "pageSize">, Pick<{
    characters: import("vue").Ref<{
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    }[], Character[] | {
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    }[]>;
    activeCharacter: import("vue").Ref<{
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    } | null, Character | {
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    total: import("vue").Ref<number, number>;
    currentPage: import("vue").Ref<number, number>;
    pageSize: import("vue").Ref<number, number>;
    hasCharacters: import("vue").ComputedRef<boolean>;
    hasActiveCharacter: import("vue").ComputedRef<boolean>;
    totalPages: import("vue").ComputedRef<number>;
    fetchCharacters: (params?: {
        search?: string;
        page?: number;
    }) => Promise<void>;
    fetchActiveCharacter: () => Promise<Character | null>;
    createCharacter: (data: CharacterCreate) => Promise<Character>;
    selectCharacter: (characterId: number) => Promise<Character>;
    updateCharacter: (characterId: number, data: CharacterUpdate) => Promise<Character>;
    deleteCharacter: (characterId: number) => Promise<void>;
    uploadAvatar: (characterId: number, file: File) => Promise<{
        avatar_url: string;
    }>;
    resetStore: () => void;
    initializeCharacters: () => Promise<void>;
}, "hasCharacters" | "totalPages" | "hasActiveCharacter">, Pick<{
    characters: import("vue").Ref<{
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    }[], Character[] | {
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    }[]>;
    activeCharacter: import("vue").Ref<{
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    } | null, Character | {
        character_id: number;
        name: string;
        gender: Gender;
        intro: string;
        personality_tags: string[];
        interest_tags: string[];
        prompt: string;
        created_by: number;
        is_active: boolean;
        created_at: string;
        updated_at?: string | undefined;
        avatar_url?: string | undefined;
        chat_count?: number | undefined;
        total_messages?: number | undefined;
        unique_users?: number | undefined;
        last_used?: string | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    total: import("vue").Ref<number, number>;
    currentPage: import("vue").Ref<number, number>;
    pageSize: import("vue").Ref<number, number>;
    hasCharacters: import("vue").ComputedRef<boolean>;
    hasActiveCharacter: import("vue").ComputedRef<boolean>;
    totalPages: import("vue").ComputedRef<number>;
    fetchCharacters: (params?: {
        search?: string;
        page?: number;
    }) => Promise<void>;
    fetchActiveCharacter: () => Promise<Character | null>;
    createCharacter: (data: CharacterCreate) => Promise<Character>;
    selectCharacter: (characterId: number) => Promise<Character>;
    updateCharacter: (characterId: number, data: CharacterUpdate) => Promise<Character>;
    deleteCharacter: (characterId: number) => Promise<void>;
    uploadAvatar: (characterId: number, file: File) => Promise<{
        avatar_url: string;
    }>;
    resetStore: () => void;
    initializeCharacters: () => Promise<void>;
}, "fetchCharacters" | "deleteCharacter" | "uploadAvatar" | "selectCharacter" | "fetchActiveCharacter" | "createCharacter" | "updateCharacter" | "resetStore" | "initializeCharacters">>;
